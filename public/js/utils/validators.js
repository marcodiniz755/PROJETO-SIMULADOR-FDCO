// Utilit√°rios de valida√ß√£o

class ValidatorService {
    constructor() {
        this.municipiosPrioritariosAltaRenda = [
            "AN√ÅPOLIS", "GOI√ÅS", "JATA√ç", "FORMOSA", "ITUMBIARA", "CALDAS NOVAS", "CATAL√ÉO", "MINEIROS",
            "QUIRIN√ìPOLIS", "SENADOR CANEDO", "LUZI√ÇNIA", "VALPARA√çSO DE GOI√ÅS", "NOVO GAMA", "√ÅGUAS LINDAS DE GOI√ÅS",
            "BRAS√çLIA", "V√ÅRZEA GRANDE", "RONDON√ìPOLIS", "CUIAB√Å", "SINOP", "TANGAR√Å DA SERRA", "C√ÅCERES",
            "BARRA DO GAR√áAS", "PRIMAVERA DO LESTE", "ALTA FLORESTA", "SORRISO", "LUCAS DO RIO VERDE",
            "CAMPO GRANDE", "DOURADOS", "TR√äS LAGOAS", "CORUMB√Å", "PONTA POR√É", "AQUIDAUANA", "NAVIRA√ç"
        ];
    }

    // Fun√ß√£o para validar se pode calcular
    canCalculate() {
        const totalInvestment = window.parseInputValue(document.getElementById('totalInvestment').value) || 0;
        const state = document.getElementById('state').value;
        const municipality = document.getElementById('municipality').value;
        const projectSector = document.getElementById('projectSector').value;
        
        if (!state || !municipality || !projectSector || !totalInvestment) {
            return { canProceed: false, message: '‚ö†Ô∏è Por favor, preencha todos os campos obrigat√≥rios.' };
        }
        
        const municipalityInfo = window.getMunicipalityInfo(state, municipality);
        if (!municipalityInfo) {
            return { canProceed: false, message: `‚ùå Munic√≠pio "${municipality}" n√£o encontrado no estado ${state}.` };
        }
        
        const isPrioritaria = municipalityInfo.prioridade_espacial === 'PRIORIT√ÅRIA';
        const isHealthSector = projectSector === 'servicos_hospitalares_II';
        const isPrioritariaAltaRenda = isPrioritaria && this.municipiosPrioritariosAltaRenda.includes(municipality.toUpperCase());
        
        let minimoInvestimento;
        let justificativa;
        
        if (isHealthSector) {
            minimoInvestimento = 15000000;
            justificativa = 'Servi√ßos Hospitalares (exce√ß√£o para qualquer tipologia)';
        } else if (isPrioritariaAltaRenda) {
            minimoInvestimento = 20000000;
            justificativa = 'Munic√≠pio PRIORIT√ÅRIO de Alta Renda';
        } else if (isPrioritaria) {
            minimoInvestimento = 15000000;
            justificativa = 'Munic√≠pio PRIORIT√ÅRIO (Baixa/M√©dia Renda)';
        } else {
            minimoInvestimento = 20000000;
            justificativa = 'Munic√≠pio DEMAIS';
        }
        
        if (totalInvestment < minimoInvestimento) {
            const valorMinimo = window.formatCurrency(minimoInvestimento);
            const valorAtual = window.formatCurrency(totalInvestment);
            return { 
                canProceed: false, 
                message: `‚ùå Valor insuficiente! M√≠nimo: ${valorMinimo} (${justificativa}). Atual: ${valorAtual}`
            };
        }
        
        return { canProceed: true, message: '' };
    }

    // Validar recursos pr√≥prios m√≠nimos
    validateOwnResources() {
        const ownResourcesPerc = parseFloat(document.getElementById('ownResources').value) || 20;
        const totalInvestment = window.parseInputValue(document.getElementById('totalInvestment').value) || 0;
        const fixedInvestment = window.parseInputValue(document.getElementById('fixedInvestment').value) || 0;
        const state = document.getElementById('state').value;
        const municipality = document.getElementById('municipality').value;
        const projectSector = document.getElementById('projectSector').value;
        const hintElement = document.getElementById('ownResourcesHint');
        
        if (!hintElement) return;
        
        if (ownResourcesPerc < 20) {
            hintElement.innerHTML = '‚ùå <strong>M√≠nimo 20%</strong> do investimento total';
            hintElement.style.color = '#e74c3c';
            return;
        }
        
        if (!totalInvestment) {
            hintElement.innerHTML = 'üí° <strong>M√≠nimo 20%</strong> do investimento total';
            hintElement.style.color = '#7f8c8d';
            return;
        }
        
        const ownResourcesAmount = totalInvestment * (ownResourcesPerc / 100);
        
        if (state && municipality && projectSector && fixedInvestment) {
            const limits = window.calculateLimits(totalInvestment, projectSector, state, municipality, ownResourcesPerc, fixedInvestment);
            
            if (limits) {
                const fdcoAvailable = limits.fdcoAmount;
                const totalUpdatedInvestment = ownResourcesAmount + fdcoAvailable;
                const needsApproval = fdcoAvailable > 50000000; // standardLimit
                
                hintElement.innerHTML = `‚úÖ <strong>${ownResourcesPerc}%</strong> = ${window.formatCurrency(ownResourcesAmount)}<br>üí∞ <strong>FDCO dispon√≠vel:</strong> ${window.formatCurrency(fdcoAvailable)}<br>üìä <strong>Valor Total Atualizado do Investimento = Recursos Pr√≥prios e Terceiros + FDCO dispon√≠vel =</strong> ${window.formatCurrency(ownResourcesAmount)} + ${window.formatCurrency(fdcoAvailable)} = ${window.formatCurrency(totalUpdatedInvestment)}`;
                hintElement.style.color = needsApproval ? '#856404' : '#27ae60';
            } else {
                hintElement.innerHTML = `‚úÖ <strong>${ownResourcesPerc}%</strong> = ${window.formatCurrency(ownResourcesAmount)}`;
                hintElement.style.color = '#27ae60';
            }
        } else {
            hintElement.innerHTML = `‚úÖ <strong>${ownResourcesPerc}%</strong> = ${window.formatCurrency(ownResourcesAmount)}`;
            hintElement.style.color = '#27ae60';
        }
    }

    // Validar investimento total m√≠nimo
    validateMinimumTotalInvestment() {
        const totalInvestment = window.parseInputValue(document.getElementById('totalInvestment').value) || 0;
        const state = document.getElementById('state').value;
        const municipality = document.getElementById('municipality').value;
        const projectSector = document.getElementById('projectSector').value;
        const hintElement = document.getElementById('totalInvestmentHint');
        
        if (!hintElement) return;
        
        const formGroup = document.getElementById('totalInvestment').closest('.form-group');
        if (formGroup) {
            formGroup.classList.remove('error', 'success');
        }
        
        if (!state || !municipality || !projectSector) {
            hintElement.innerHTML = 'üí° <strong>Valor m√≠nimo:</strong> R$ 15-20 milh√µes conforme munic√≠pio e setor';
            hintElement.style.color = '#7f8c8d';
            return;
        }
        
        const municipalityInfo = window.getMunicipalityInfo(state, municipality);
        const isPrioritaria = municipalityInfo?.prioridade_espacial === 'PRIORIT√ÅRIA';
        const isHealthSector = projectSector === 'servicos_hospitalares_II';
        const isPrioritariaAltaRenda = isPrioritaria && this.municipiosPrioritariosAltaRenda.includes(municipality.toUpperCase());
        
        let minimoInvestimento;
        let justificativa;
        
        if (isHealthSector) {
            minimoInvestimento = 15000000;
            justificativa = 'Servi√ßos Hospitalares (exce√ß√£o para qualquer tipologia)';
        } else if (isPrioritariaAltaRenda) {
            minimoInvestimento = 20000000;
            justificativa = 'Munic√≠pio PRIORIT√ÅRIO de Alta Renda';
        } else if (isPrioritaria) {
            minimoInvestimento = 15000000;
            justificativa = 'Munic√≠pio PRIORIT√ÅRIO (Baixa/M√©dia Renda)';
        } else {
            minimoInvestimento = 20000000;
            justificativa = 'Munic√≠pio DEMAIS';
        }
        
        const observacao = (minimoInvestimento === 15000000) ? 
            `<br><br>üìã <strong>Observa√ß√£o:</strong> R$ 15 milh√µes aplic√°vel para:<br>‚Ä¢ Empreendimentos situados em munic√≠pios classificados pela tipologia da PNDR, como de baixa e m√©dia renda, independente do seu dinamismo;<br>‚Ä¢ Investimentos em servi√ßos hospitalares e ambulatoriais, independentemente da classifica√ß√£o da Tipologia do munic√≠pio definido pela PNDR` : '';
        
        const valorMinimo = window.formatCurrency(minimoInvestimento);
        
        if (!totalInvestment) {
            hintElement.innerHTML = `üí° <strong>Valor m√≠nimo:</strong> ${valorMinimo} (${justificativa})${observacao}`;
            hintElement.style.color = '#0c5460';
            return;
        }
        
        if (totalInvestment < minimoInvestimento) {
            hintElement.innerHTML = `‚ùå <strong>Insuficiente!</strong> M√≠nimo: ${valorMinimo} (${justificativa})<br>Atual: ${window.formatCurrency(totalInvestment)}<br><br>üìã <strong>Base Legal:</strong> Resolu√ß√£o CONDEL/SUDECO 135 de 12 de dezembro de 2022, Art. 2¬∫ - ...valor m√≠nimo dos projetos assistidos pelo FDCO em R$ 15.000.000,00 (quinze milh√µes de reais), para empreendimentos situados em munic√≠pios classificados pela tipologia da Pol√≠tica Nacional de Desenvolvimento Regional - PNDR como de baixa e m√©dia renda, independente do seu dinamismo e para investimentos em servi√ßos hospitalares e ambulatoriais, independentemente da classifica√ß√£o da Tipologia do munic√≠pio definido pela PNDR, respeitados os limites de participa√ß√£o dos recursos do Fundo estabelecidos pelo Conselho Monet√°rio Nacional (CMN).`;
            hintElement.style.color = '#721c24';
            
            if (formGroup) {
                formGroup.classList.add('error');
            }
            return;
        }
        
        hintElement.innerHTML = `‚úÖ <strong>Adequado!</strong> M√≠nimo: ${valorMinimo} (${justificativa})<br>Atual: ${window.formatCurrency(totalInvestment)}${observacao}`;
        hintElement.style.color = '#155724';
        
        if (formGroup) {
            formGroup.classList.add('success');
        }
    }

    // Validar investimento fixo
    validateFixedInvestment() {
        const totalInvestment = window.parseInputValue(document.getElementById('totalInvestment').value) || 0;
        const fixedInvestment = window.parseInputValue(document.getElementById('fixedInvestment').value) || 0;
        const state = document.getElementById('state').value;
        const municipality = document.getElementById('municipality').value;
        const projectSector = document.getElementById('projectSector').value;
        const hintElement = document.getElementById('fixedInvestmentHint');
        
        if (!hintElement) return;
        
        if (!state || !municipality || !projectSector) {
            hintElement.innerHTML = 'üí° Selecione todos os campos primeiro para ver os limites';
            hintElement.style.color = '#7f8c8d';
            return;
        }
        
        const municipalityInfo = window.getMunicipalityInfo(state, municipality);
        const location = municipalityInfo?.prioridade_espacial === 'PRIORIT√ÅRIA' ? 'prioritaria' : 'demais';
        
        // Buscar limites setoriais do CalculatorService
        const sectorLimits = calculatorService.sectorLimits;
        const sectorLimitPerc = sectorLimits[projectSector] ? sectorLimits[projectSector][location] : null;
        
        if (!sectorLimitPerc) {
            hintElement.innerHTML = '‚ö†Ô∏è Setor n√£o encontrado';
            hintElement.style.color = '#856404';
            return;
        }
        
        if (!fixedInvestment) {
            const regionName = location === 'prioritaria' ? 'PRIORIT√ÅRIA' : 'DEMAIS';
            hintElement.innerHTML = `üí° <strong>Limite FDCO:</strong> 90% do investimento fixo (m√°x ${sectorLimitPerc}% do total e 80% financi√°vel)<br>Regi√£o ${regionName}`;
            hintElement.style.color = '#856404';
            return;
        }
        
        const maxBySector = totalInvestment * (sectorLimitPerc / 100);
        const maxByFixedRule = fixedInvestment * 0.9;
        const maxByFinanciable = totalInvestment * 0.8;
        const fdcoLimit = Math.min(maxBySector, maxByFixedRule, maxByFinanciable);
        
        const regionName2 = location === 'prioritaria' ? 'PRIORIT√ÅRIA' : 'DEMAIS';
        const needsApproval = fdcoLimit > 50000000; // standardLimit
        
        hintElement.innerHTML = `‚úÖ <strong>Limite FDCO: ${window.formatCurrency(fdcoLimit)}</strong><br>‚Ä¢ Setorial (${sectorLimitPerc}% do total): ${window.formatCurrency(maxBySector)}<br>‚Ä¢ 90% do investimento fixo: ${window.formatCurrency(maxByFixedRule)}<br>‚Ä¢ 80% financi√°vel do total: ${window.formatCurrency(maxByFinanciable)}<br>‚Ä¢ Limite padr√£o: ${window.formatCurrency(50000000)}<br>Regi√£o ${regionName2}`;
        hintElement.style.color = needsApproval ? '#856404' : '#155724';
    }

    // Validar campos obrigat√≥rios
    validateRequiredFields() {
        const requiredFields = document.querySelectorAll('.form-group.required input, .form-group.required select');
        let allValid = true;
        
        requiredFields.forEach(field => {
            const formGroup = field.closest('.form-group');
            const value = field.value.trim();
            
            if (!value) {
                formGroup.classList.add('error');
                formGroup.classList.remove('success');
                allValid = false;
            } else {
                formGroup.classList.remove('error');
                formGroup.classList.add('success');
            }
        });
        
        return allValid;
    }

    // Validar email
    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Validar telefone
    validatePhone(phone) {
        const cleanPhone = phone.replace(/\D/g, '');
        return cleanPhone.length >= 10 && cleanPhone.length <= 11;
    }

    // Validar CPF
    validateCPF(cpf) {
        const cleanCPF = cpf.replace(/\D/g, '');
        
        if (cleanCPF.length !== 11) return false;
        if (/^(\d)\1{10}$/.test(cleanCPF)) return false; // N√∫meros repetidos
        
        // Valida√ß√£o dos d√≠gitos verificadores
        let sum = 0;
        for (let i = 0; i < 9; i++) {
            sum += parseInt(cleanCPF.charAt(i)) * (10 - i);
        }
        let remainder = 11 - (sum % 11);
        if (remainder === 10 || remainder === 11) remainder = 0;
        if (remainder !== parseInt(cleanCPF.charAt(9))) return false;
        
        sum = 0;
        for (let i = 0; i < 10; i++) {
            sum += parseInt(cleanCPF.charAt(i)) * (11 - i);
        }
        remainder = 11 - (sum % 11);
        if (remainder === 10 || remainder === 11) remainder = 0;
        if (remainder !== parseInt(cleanCPF.charAt(10))) return false;
        
        return true;
    }

    // Validar CNPJ
    validateCNPJ(cnpj) {
        const cleanCNPJ = cnpj.replace(/\D/g, '');
        
        if (cleanCNPJ.length !== 14) return false;
        if (/^(\d)\1{13}$/.test(cleanCNPJ)) return false; // N√∫meros repetidos
        
        // Valida√ß√£o dos d√≠gitos verificadores
        const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
        const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
        
        let sum = 0;
        for (let i = 0; i < 12; i++) {
            sum += parseInt(cleanCNPJ.charAt(i)) * weights1[i];
        }
        let remainder = sum % 11;
        const digit1 = remainder < 2 ? 0 : 11 - remainder;
        if (digit1 !== parseInt(cleanCNPJ.charAt(12))) return false;
        
        sum = 0;
        for (let i = 0; i < 13; i++) {
            sum += parseInt(cleanCNPJ.charAt(i)) * weights2[i];
        }
        remainder = sum % 11;
        const digit2 = remainder < 2 ? 0 : 11 - remainder;
        if (digit2 !== parseInt(cleanCNPJ.charAt(13))) return false;
        
        return true;
    }

    // Validar intervalo de datas
    validateDateRange(startDate, endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        
        return start <= end;
    }

    // Validar valor m√≠nimo e m√°ximo
    validateRange(value, min, max) {
        const numValue = parseFloat(value);
        
        if (isNaN(numValue)) return false;
        if (min !== null && numValue < min) return false;
        if (max !== null && numValue > max) return false;
        
        return true;
    }

    // Fun√ß√£o principal para disparar todas as valida√ß√µes
    triggerValidations() {
        this.validateFixedInvestment();
        this.validateMinimumTotalInvestment();
        this.validateOwnResources();
    }

    // Mostrar erro de valida√ß√£o
    showValidationError(element, message) {
        const formGroup = element.closest('.form-group');
        if (formGroup) {
            formGroup.classList.add('error');
            
            let errorElement = formGroup.querySelector('.error-message');
            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.className = 'error-message';
                formGroup.appendChild(errorElement);
            }
            errorElement.textContent = message;
        }
    }

    // Limpar erro de valida√ß√£o
    clearValidationError(element) {
        const formGroup = element.closest('.form-group');
        if (formGroup) {
            formGroup.classList.remove('error');
            
            const errorElement = formGroup.querySelector('.error-message');
            if (errorElement) {
                errorElement.remove();
            }
        }
    }

    // Rolar para o primeiro erro
    scrollToFirstError() {
        const firstError = document.querySelector('.form-group.error');
        if (firstError) {
            firstError.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center' 
            });
            
            const input = firstError.querySelector('input, select');
            if (input) {
                setTimeout(() => input.focus(), 500);
            }
        }
    }
}

// Inst√¢ncia global
const validatorService = new ValidatorService();

// Fun√ß√µes globais para compatibilidade
// Fun√ß√£o canCalculate global direta
function canCalculate() {
    return validatorService.canCalculate();
}

window.canCalculate = canCalculate;
window.validateOwnResources = () => validatorService.validateOwnResources();
window.validateMinimumTotalInvestment = () => validatorService.validateMinimumTotalInvestment();
window.validateFixedInvestment = () => validatorService.validateFixedInvestment();
// Fun√ß√£o triggerValidations global direta
function triggerValidations() {
    validatorService.triggerValidations();
}

window.triggerValidations = triggerValidations;
window.scrollToFirstError = () => validatorService.scrollToFirstError();
window.showValidationErrorInResults = () => {
    const resultsDiv = document.getElementById('simulationResults');
    if (resultsDiv) {
        resultsDiv.style.display = 'none';
    }
    const placeholder = document.getElementById('resultsPlaceholder');
    if (placeholder) {
        placeholder.style.display = 'block';
    }
    validatorService.scrollToFirstError();
};